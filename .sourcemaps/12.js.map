{"version":3,"sources":["../../src/pages/forum/forum.module.ts","../../src/pages/forum/forum.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AACZ;AAapC,IAAa,eAAe;IAA5B;IAA8B,CAAC;IAAD,sBAAC;AAAD,CAAC;AAAlB,eAAe;IAX3B,+DAAQ,CAAC;QACR,YAAY,EAAE;YACZ,yDAAS;SACV;QACD,OAAO,EAAE;YACP,sEAAe,CAAC,QAAQ,CAAC,yDAAS,CAAC;SACpC;QACD,OAAO,EAAE;YACP,yDAAS;SACV;KACF,CAAC;GACW,eAAe,CAAG;AAAH;;;;;;;;;;;;;;;;;;;;ACfc;AAS1C,IAAa,SAAS;IACpB,yCAAyC;IACzC,sCAAsC;IACtC,sCAAsC;IACtC,8CAA8C;IAE9C;IAAc,CAAC;IA0IjB,gBAAC;AAAD,CAAC;AAhJY,SAAS;IAJrB,gEAAS,CAAC;QACT,QAAQ,EAAE,YAAY;OACG;KAC1B,CAAC;;AAiJD;SAhJY,SAAS,e","file":"12.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\nimport { ForumPage } from './forum';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    ForumPage,\r\n  ],\r\n  imports: [\r\n    IonicPageModule.forChild(ForumPage),\r\n  ],\r\n  exports: [\r\n    ForumPage\r\n  ]\r\n})\r\nexport class ForumPageModule {}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/forum/forum.module.ts","import { Component } from '@angular/core';\r\nimport { NavController, AlertController, ActionSheetController, IonicPage } from 'ionic-angular';\r\nimport { AngularFireOfflineDatabase, AfoListObservable, AfoObjectObservable } from 'angularfire2-offline/database';\r\nimport { Network } from '@ionic-native/network'\r\n@IonicPage()\r\n@Component({\r\n  selector: 'page-forum',\r\n  templateUrl: 'forum.html'\r\n})\r\nexport class ForumPage {\r\n  // discussions: AfoListObservable<any[]>;\r\n  // messages: AfoListObservable<any[]>;\r\n  // statistics: AfoListObservable<any>;\r\n  // discussionDetail: AfoObjectObservable<any>;\r\n\r\n  constructor(){}\r\n\r\n  // constructor(public navCtrl: NavController, afoDatabase: AngularFireOfflineDatabase, public alertCtrl: AlertController, public actionSheetCtrl: ActionSheetController, private network: Network) {\r\n  //   // this.discussions = afoDatabase.list('/discussions');\r\n  //   // this.messages = afoDatabase.list('/messages');\r\n  //   // this.statistics = afoDatabase.list('/statistics');\r\n  //   console.log('network', this.network.type)\r\n  //   this.watchForConnection();\r\n  //   this.watchForDisconnect();\r\n  // }\r\n  // watchForConnection() {\r\n  //   let connectSubscription = this.network.onConnect().subscribe(() => {\r\n  //     console.log('network connected!');\r\n  //     // We just got a connection but we need to wait briefly\r\n  //     // before we determine the connection type.  Might need to wait\r\n  //     // prior to doing any api requests as well.\r\n  //     setTimeout(() => {\r\n  //       console.log(this.network.type)\r\n  //       console.log('we got a connection..');\r\n  //       console.log('Firebase: Go Online..');\r\n  //       // self.dataService.goOnline();\r\n  //       // self.events.publish('network:connected', true);\r\n  //   ***REMOVED***, 3000);\r\n  // ***REMOVED***);\r\n  // }\r\n\r\n  // watchForDisconnect() {\r\n  //   var self = this;\r\n  //   // watch network for a disconnect\r\n  //   let disconnectSubscription = this.network.onDisconnect().subscribe(() => {\r\n  //     console.log('network was disconnected :-(');\r\n  //     console.log('Firebase: Go Offline..');\r\n  //     // self.sqliteService.resetDatabase();\r\n  //     // self.dataService.goOffline();\r\n  //     // self.events.publish('network:connected', false);\r\n  // ***REMOVED***);\r\n  // }\r\n\r\n  // openDiscussion(discussion) {\r\n  //   this.navCtrl.push('ForumDiscussionPage', discussion)\r\n  // }\r\n\r\n  // addDiscussion() {\r\n  //   let prompt = this.alertCtrl.create({\r\n  //     title: 'Add new discussion',\r\n  //     message: \"Enter a title for the discussion\",\r\n  //     inputs: [\r\n  //       {\r\n  //         name: 'title',\r\n  //         placeholder: 'Title'\r\n  //     ***REMOVED***,\r\n  //     ],\r\n  //     buttons: [\r\n  //       {\r\n  //         text: 'Cancel',\r\n  //         handler: data => {\r\n  //           console.log('Cancel clicked');\r\n  //       ***REMOVED***\r\n  //     ***REMOVED***,\r\n  //       {\r\n  //         text: 'Save',\r\n  //         handler: data => {\r\n  //           this.discussions.push({\r\n  //             title: data.title,\r\n  //             messages: 0,\r\n  //             created: Date.now(),\r\n  //             lastUpdated: Date.now(),\r\n  //             createdBy: 'user'\r\n  //         ***REMOVED***);\r\n  //       ***REMOVED***\r\n  //     ***REMOVED***\r\n  //     ]\r\n  // ***REMOVED***);\r\n  //   prompt.present();\r\n  // }\r\n\r\n  // showOptions(discussionId, discussionTitle) {\r\n  //   let actionSheet = this.actionSheetCtrl.create({\r\n  //     title: 'What do you want to do?',\r\n  //     buttons: [\r\n  //       {\r\n  //         text: 'Delete Discussion',\r\n  //         role: 'destructive',\r\n  //         handler: () => {\r\n  //           this.removeDiscussion(discussionId);\r\n  //       ***REMOVED***\r\n  //     ***REMOVED***, {\r\n  //         text: 'Update title',\r\n  //         handler: () => {\r\n  //           this.updateDiscussion(discussionId, discussionTitle);\r\n  //       ***REMOVED***\r\n  //     ***REMOVED***, {\r\n  //         text: 'Cancel',\r\n  //         role: 'cancel',\r\n  //         handler: () => {\r\n  //           console.log('Cancel clicked');\r\n  //       ***REMOVED***\r\n  //     ***REMOVED***\r\n  //     ]\r\n  // ***REMOVED***);\r\n  //   actionSheet.present();\r\n  // }\r\n\r\n  // removeDiscussion(discussionId: string) {\r\n  //   this.discussions.remove(discussionId);\r\n  // }\r\n\r\n  // updateDiscussion(discussionId, discussionTitle) {\r\n  //   let prompt = this.alertCtrl.create({\r\n  //     title: 'Discussion Name',\r\n  //     message: \"Update the name for this discussion\",\r\n  //     inputs: [\r\n  //       {\r\n  //         name: 'title',\r\n  //         placeholder: 'Title',\r\n  //         value: discussionTitle\r\n  //     ***REMOVED***,\r\n  //     ],\r\n  //     buttons: [\r\n  //       {\r\n  //         text: 'Cancel',\r\n  //         handler: data => {\r\n  //           console.log('Cancel clicked');\r\n  //       ***REMOVED***\r\n  //     ***REMOVED***,\r\n  //       {\r\n  //         text: 'Save',\r\n  //         handler: data => {\r\n  //           this.discussions.update(discussionId, {\r\n  //             title: data.title\r\n  //         ***REMOVED***);\r\n  //       ***REMOVED***\r\n  //     ***REMOVED***\r\n  //     ]\r\n  // ***REMOVED***);\r\n  //   prompt.present();\r\n  // }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/forum/forum.ts"],"sourceRoot":""}